#if INTERACTIVE
#r "bin\Debug\TeamBoard.Events.dll"
#endif

open System
open System.IO
open TeamBoard.Events

//===================================================

let stamp = String.Format("//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the \"{0}\" script.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
", __SOURCE_FILE__)

type argument =
    {
        Name: string
        Type: Type
    }   

let arg (argName:string) (argType:Type) = {argument.Name = argName; Type = argType}

let fieldTempate = "
        [<field: DataMember(Name = \"{0}@\")>]
        {0}: {1}
"

let recordTemplate = "
[<DataContract>]
type {0} = 
    {{{1}    }}
    interface IAggregateEvent with member this.Id = this.Id
"
let record name args =
    String.Format(recordTemplate, name, args |> List.choose (fun x -> Some(String.Format(fieldTempate, x.Name, x.Type.Name))) |> List.reduce (fun x y -> x + y))

let Generate elements = File.WriteAllText (Path.Combine(__SOURCE_DIRECTORY__, "Events.fs"), List.reduce (fun x y -> x + y) (stamp::elements))

let event = record

//===================================================

let header = "
namespace TeamBoard.Events

open System
open System.Runtime.Serialization
"

// Types
let Guid name = arg name typeof<Guid>
let string name = arg name typeof<string>
let int name = arg name typeof<int>
let byte name = arg name typeof<byte>


// Fields
let id = arg "Id" typeof<Guid>
let caption = arg "Caption" typeof<string>
let userName = arg "UserName" typeof<string>
let userId = Guid "UserId"
let teamMemberRole = arg "Role" typeof<TeamMemberRole>


// Events
let events = [
                event "UserCreated" [id; string "Login"; string "Password"; string "Name"]
                event "UserPhotoSet" [id; arg "Photo" typeof<byte[]>]

                event "ProjectCreated" [id; caption]
                event "TaskStatusCreated" [id; caption]
                event "UserStoryStatusCreated" [id; caption]
                event "TaskStatusToUserStoryStatusAdded" [id; int "UserStoryStatusPosition"; int "TaskStatusPosition"]
                event "TeamMemberAdded" [id; arg "CreatorId" typeof<Guid>; teamMemberRole]
             ]

Generate (header::events)