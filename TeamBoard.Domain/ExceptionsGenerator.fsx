open System
open System.IO

//===================================================

let stamp = String.Format("//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the \"{0}\" script.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
", __SOURCE_FILE__)

type argument =
    {
        Name: string
        Type: Type
    }   

let arg (argName:string) (argType:Type) = {argument.Name = argName; Type = argType}

let fieldTempate = "
    member this.{0} = {0}"

let recordTemplate = "
// {0}
type {0}({1}) = 
    inherit {5}{2}
    override this.ToString() = String.Format({3}){4}
"
let equalsTemplate = "
    override this.Equals other = 
        match other with
        | :? {{0}} as other -> {0}
        | _ -> false
    override this.GetHashCode() = this.ToString().GetHashCode()"


let format optionalTemplate transform delimiter args = 
    let template = if String.IsNullOrEmpty(optionalTemplate) then "{0}" else optionalTemplate
    match args with
        | [] -> ""
        | _ -> String.Format(template, args |> List.choose (transform) |> List.reduce (fun x y -> String.Format("{0}{1}{2}", x, delimiter, y)))

let record baseClass (name:string) (message:string) args =
    let ctorParams = args |> format "" (fun x -> Some(String.Format("{0}:{1}", x.Name, x.Type.Name))) ", "
    let members = args |> format "" (fun x -> Some(String.Format(fieldTempate, x.Name, x.Type.Name))) ""
    let toStringFieldNames = args |> List.mapi (fun i x -> (i, x)) |> format ": [{0}]" (fun (i, x) -> Some(String.Format("{0}={{{1}}}", x.Name, i))) ", "
    let toStringFields = args |> format ", {0}" (fun x-> Some(String.Format("{0}", x.Name))) ", "
    let toStringText = String.Format("\"{0}{1}\"{2}", message, toStringFieldNames, toStringFields)
    let equalsExpression = String.Format(args |> format equalsTemplate (fun x-> Some(String.Format("{0} = other.{0}", x.Name))) " && ", name)

    String.Format(recordTemplate, name, ctorParams, members, toStringText, equalsExpression, baseClass)

let Generate elements = File.WriteAllText (Path.Combine(__SOURCE_DIRECTORY__, "Exceptions.fs"), List.reduce (fun x y -> x + y) (stamp::elements))

let exc = record
let excd = record "Exception()"

//===================================================

let header = "
namespace TeamBoard.Domain

open System
"

// Types
let Guid name = arg name typeof<Guid>
let string name = arg name typeof<string>
let int name = arg name typeof<int>
let byte name = arg name typeof<byte>


// Fields
let id = arg "Id" typeof<Guid>
let caption = arg "Caption" typeof<string>
let userName = arg "UserName" typeof<string>
let userId = Guid "UserId"



// Events
let events = [
                excd "EntityNotFoundException" "Requested entity was not found" [string "EntityName"; Guid "EntityId"]
                excd "EntityUnhandledEventException" "Entity does not containg handler for this event type" []
                excd "DuplicateLoginException" "User with such login already exists" [string "Login"]
             ]

Generate (header::events)